// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "fight.proto" (package "fight", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FightService } from "./fight";
import type { ResponseFightNextTick } from "./fight";
import type { RequestFightNextTickMessage } from "./fight";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RequestStartFight } from "./fight";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServerFightMessage } from "./fight";
import type { ClientFightMessage } from "./fight";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// ---------- SERVICES ----------

/**
 * @generated from protobuf service fight.FightService
 */
export interface IFightServiceClient {
    /**
     * @generated from protobuf rpc: Fight(stream fight.ClientFightMessage) returns (stream fight.ServerFightMessage);
     */
    fight(options?: RpcOptions): DuplexStreamingCall<ClientFightMessage, ServerFightMessage>;
    /**
     * @generated from protobuf rpc: RequestFightStart(fight.RequestStartFight) returns (stream fight.ServerFightMessage);
     */
    requestFightStart(input: RequestStartFight, options?: RpcOptions): ServerStreamingCall<RequestStartFight, ServerFightMessage>;
    /**
     * @generated from protobuf rpc: RequestFightNextTick(fight.RequestFightNextTickMessage) returns (fight.ResponseFightNextTick);
     */
    requestFightNextTick(input: RequestFightNextTickMessage, options?: RpcOptions): UnaryCall<RequestFightNextTickMessage, ResponseFightNextTick>;
}
// ---------- SERVICES ----------

/**
 * @generated from protobuf service fight.FightService
 */
export class FightServiceClient implements IFightServiceClient, ServiceInfo {
    typeName = FightService.typeName;
    methods = FightService.methods;
    options = FightService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Fight(stream fight.ClientFightMessage) returns (stream fight.ServerFightMessage);
     */
    fight(options?: RpcOptions): DuplexStreamingCall<ClientFightMessage, ServerFightMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClientFightMessage, ServerFightMessage>("duplex", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: RequestFightStart(fight.RequestStartFight) returns (stream fight.ServerFightMessage);
     */
    requestFightStart(input: RequestStartFight, options?: RpcOptions): ServerStreamingCall<RequestStartFight, ServerFightMessage> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestStartFight, ServerFightMessage>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RequestFightNextTick(fight.RequestFightNextTickMessage) returns (fight.ResponseFightNextTick);
     */
    requestFightNextTick(input: RequestFightNextTickMessage, options?: RpcOptions): UnaryCall<RequestFightNextTickMessage, ResponseFightNextTick> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestFightNextTickMessage, ResponseFightNextTick>("unary", this._transport, method, opt, input);
    }
}
